when:
  - event: [push, pull_request, tag]
  - branch: [main, master, develop, feature/*]

# 构建矩阵 - 多版本Python测试
matrix:
  PYTHON_VERSION:
    - "3.9"
    - "3.10"
    - "3.11"

steps:
  # Stage 1: Environment setup and dependency installation
  - name: setup
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "🚀 Starting Woodpecker CI pipeline..."
      - echo "Python version $(python --version)"
      - echo "Build event $CI_COMMIT_EVENT"
      - echo "Branch $CI_COMMIT_BRANCH"
      - echo "Commit $CI_COMMIT_SHA"
      - apt-get update && apt-get install -y git

  - name: install-dependencies
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "📦 Installing Python dependencies..."
      - python -m pip install --upgrade pip
      - pip install -r requirements.txt
      - pip list

  # Stage 2: Code quality checks
  - name: code-quality
    image: python:${PYTHON_VERSION}-slim
    group: quality-checks
    commands:
      - echo "🔍 Running code quality checks..."
      - pip install -r requirements.txt
      - echo "Checking code format with black..."
      - black --check --diff app.py test_app.py
      - echo "Code style check with flake8..."
      - flake8 app.py test_app.py --max-line-length=88
      - echo "Type checking with mypy..."
      - mypy app.py --ignore-missing-imports

  # Stage 3: Unit tests
  - name: unit-tests
    image: python:${PYTHON_VERSION}-slim
    group: quality-checks
    commands:
      - echo "🧪 Running unit tests..."
      - pip install -r requirements.txt
      - python -m pytest test_app.py -v
      - echo "Unit tests completed"

  # Stage 4: Test coverage
  - name: test-coverage
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "📊 Generating test coverage report..."
      - pip install -r requirements.txt
      - python -m pytest test_app.py --cov=app --cov-report=term --cov-report=html
      - echo "Coverage report generated"
    when:
      matrix:
        PYTHON_VERSION: "3.11"

  # Stage 5: Security scan
  - name: security-scan
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "🔒 Running security scans..."
      - pip install -r requirements.txt
      - echo "Checking for known security vulnerabilities..."
      - safety check --json || echo "Safety check completed with warnings"
      - echo "Running bandit security analysis..."
      - bandit -r app.py -f json || echo "Bandit analysis completed"
    when:
      branch: [main, master]
      matrix:
        PYTHON_VERSION: "3.11"

  # Stage 6: Build artifacts
  - name: build-artifacts
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "🏗️ Building application artifacts..."
      - pip install -r requirements.txt
      - python -m py_compile app.py
      - echo "Creating build info file..."
      - |
        cat > build_info.json << EOF
        {
          "build_time": "$(date -Iseconds)",
          "commit_sha": "$CI_COMMIT_SHA",
          "branch": "$CI_COMMIT_BRANCH",
          "python_version": "${PYTHON_VERSION}",
          "build_number": "$CI_BUILD_NUMBER"
        }
        EOF
      - cat build_info.json
    when:
      matrix:
        PYTHON_VERSION: "3.11"

  # Stage 7: Static file validation
  - name: html-validation
    image: alpine:latest
    commands:
      - echo "📝 Checking HTML files..."
      - apk add --no-cache curl
      - if [ -f "index.html" ]; then echo "✅ HTML file exists"; else echo "❌ HTML file not found"; exit 1; fi
      - wc -l index.html
      - echo "HTML file line count completed"

  # Stage 8: Integration tests
  - name: integration-tests
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "🔗 Running integration tests..."
      - pip install -r requirements.txt
      - python app.py
      - echo "Application startup test completed"
    when:
      branch: [main, master]
      matrix:
        PYTHON_VERSION: "3.11"

  # Stage 9: Performance tests (only on tags)
  - name: performance-tests
    image: python:${PYTHON_VERSION}-slim
    commands:
      - echo "⚡ Running performance benchmarks..."
      - pip install -r requirements.txt
      - python -c "import time; start=time.time(); import app; print(f'Import time {time.time()-start:.3f}s')"
      - echo "Performance tests completed"
    when:
      event: tag
      matrix:
        PYTHON_VERSION: "3.11"

  # Stage 10: Deploy preparation (main branch only)
  - name: deploy-preparation
    image: alpine:latest
    commands:
      - echo "🚀 Preparing deployment package..."
      - mkdir -p dist
      - cp app.py dist/
      - cp index.html dist/
      - cp build_info.json dist/ || echo "Build info not found, skipping"
      - ls -la dist/
      - echo "Deployment package ready"
    when:
      branch: [main, master]
      matrix:
        PYTHON_VERSION: "3.11"

  # Stage 11: Final notification
  - name: notification
    image: alpine:latest
    commands:
      - echo "📢 Build completion notification..."
      - echo "✅ All steps completed!"
      - echo "📊 Build summary"
      - echo "   - Branch $CI_COMMIT_BRANCH"
      - echo "   - Commit $CI_COMMIT_SHA"
      - echo "   - Python version ${PYTHON_VERSION}"
      - echo "   - Build time $(date)"
    when:
      status: [success, failure]

# Service definitions for integration testing
services:
  - name: test-db
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - 5432

# Caching to speed up builds
cache:
  - /root/.cache/pip